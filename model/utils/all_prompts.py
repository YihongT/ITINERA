def get_system_prompt(maxPoiNum, numMustSee, numCandidates):
    
    if numMustSee > maxPoiNum-2:
        maxPoiNum = numMustSee+2

    system_prompt = f"""
    您好ChatGPT, 请扮演一个旅行大师，精通各种精致旅行体验。你的任务是从给出的'潜在兴趣点'列表中，制定完美的一日行程。你的特点？通过编织生动的故事和唤起一种如此强烈的漫游欲望，以至于仅仅通过听到你的故事就感觉如身临其境。

    ### 任务概述
    你的任务是根据给出的潜在兴趣点返回完美的一日行程。请直接根据潜在兴趣点以 JSON 格式返回行程，不需要编写任何代码。
    """

    return system_prompt



def check_final_reverse_prompt(context, user_reqs):
    prompt = f"""
    您好ChatGPT，这里有一个列表或者一段文本描述一些场所或者点。请帮我判断其中大部分酒吧是处于前半部分还是后半部分，以一个 JSON list 返回判断结果。

    ### 任务概述
    你的任务是
    1. 首先根据**用户需求**判断其想要的起始点吧是在前半部分还是后半部分。
    2. 如果用户没有关于起始点的需求，则根据给出的**上下文**来判断其中大多数酒吧是在前半部分还是后半部分。
    
    请直接根据给出的上下文返回以 JSON list 存储的结果，不需要编写任何代码。

    ### 上下文
    {context}

    ### 用户需求
    {user_reqs}

    ### 输出示例：
    - 你的返回只能是 ["0"] 或者 ["1"]
    - 返回不包括任何其他内容。

    ### 输出规范
    - 返回一个长度为 1 的list，该列表包含一个整数的字符串，"0" 表示在前半部分，"1" 表示在后半部分。
    - 以一个 JSON List 返回，List 内部只包含一个元素。
    - list 可为空，请只返回一个 JSON list。
    - 输出中不应包含任何其他信息，确保你的返回可以被 json.loads 解析。

    现在，请根据**上下文**，按照**输出规范**返回你的判断。
    """
    
    return prompt


def get_hour_prompt(user_reqs):

    prompt = f"""
    您好ChatGPT,请扮演一个顶级AI时间规划助手，助手的工作是根据用户需求，来判断用户完成需求所需的一日行程时间。如果用户需求为空，请默认返回 ["4"]。

    ### 任务概述
    你的任务是根据给出的用户需求返回所需的一日行程时间。如果用户需求中提到了对线路的时间要求，则直接按照用户需求返回一日行程时间，最多不超过8小时（超过8小时返回 ["8"]）。请直接根据用户需求返回行程时间，不需要编写任何代码。

    ### 用户需求
    {user_reqs}

    ### 输入输出示例
    - **示例1**:
    - **用户需求**: ["博物馆", "地道美食", "夜生活"]
    - **输出**: ["8"]
    
    - **示例2**:
    - **用户需求**: ["历史建筑观光", "欣赏城市风光"]
    - **输出**: ["6"]

    - **示例3** (这个示例中用户明确了线路是**五小时左右**):
    - **用户需求**: ["黄浦江", "豫园逛逛", "五小时左右"]
    - **输出**: ["5"]

    ### 输出规范
    - 返回一个长度为 1 的list，该列表包含一个整数，表示行程所需的时间长度（小时数）。取值范围为 1 ~ 8。
    - 以一个 JSON List 返回，List 内部只包含一个元素。
    - list 可为空，请只返回一个 JSON list。
    - 输出中不应包含任何其他信息，确保你的返回可以被 json.loads 解析。

    现在，请根据**用户需求**，按照**输出规范**返回一日行程所需的时间。
    """
    
    return prompt



def get_start_point_prompt(candidate_points, user_reqs, return_candidates, distance_string):

    candidate_strings = f""
    for i, candidate in enumerate(candidate_points):
        candidate_strings += f"索引{i}: {candidate}\n"

    prompt = f"""
    您好ChatGPT,请扮演一个顶级AI旅行规划助手，助手的工作是根据用户需求和提供的候选点，返回一日游行程的最佳起点的索引。如果候选点为空，请默认返回 ["0"]。

    ### 任务概述
    你的任务是根据给出的候选点和用户需求，返回最佳的一日游行程起点的索引。请直接根据用户需求和候选点返回起点的索引，不需要编写任何代码。

    ### 候选点
    {candidate_strings}

    ### 用户需求
    {user_reqs}

    ### 指导方针
    1. 确保所选点符合用户需求: {user_reqs}
    2. 起点应靠近其相邻点。
    3. 优先考虑像博物馆或艺术画廊这样的地方，这些地方通常需要更多的探索时间。
    4. 避免从酒吧或俱乐部开始。

    ### 输入输出示例
    - **示例1**:
    - **候选点**: ["博物馆", "公园", "酒吧"]
    - **输出**: ["0"]
    
    - **示例2**:
    - **候选点**: ["购物中心", "艺术画廊", "历史建筑"]
    - **输出**: ["1"]

    ### 输出规范
    1. 返回一个长度为 1 的list，该列表包含一个整数，表示最佳起点的索引。
    2. 以一个 JSON List 返回，List 内部只包含一个元素。
    3. 输出中不应包含任何其他信息，确保你的返回可以被 json.loads 解析。
    4. 你的回应应该是一个长度为1的 JSON 列表，该列表中的索引应该来自 {return_candidates}。
        - 示例：["0"]

    现在，请根据**候选点**和**用户需求**，按照**输出规范**返回最佳的一日游行程起点的索引。
    注意，确保你的回复是{return_candidates}中的**一个数字构成的列表**，参考**输出规范**中的要求，以**一个长度为1的 JSON 列表**返回，只返回**一个长度为1的 JSON 列表**，不返回任何其他内容。
    """

    return prompt


def process_input_prompt(user_input):

    prompt = f"""
    您好ChatGPT，请帮我基于一段用户需求描述，将其拆解成多个独立的需求，每个独立的需求应该包括正向需求和负向需求。请直接根据给出的**用户输入**返回按照下面的格式的结果，不需要编写任何代码。

    ---

    ### 输出格式：
    
    返回一个列表，其中每一项都是一个字典，代表一个独立的需求，具有以下键值对：
    - **pos**：正向需求，代表用户想要的，但不包括任何负向需求。
    - **neg**：负向需求，一般是用户不想要的，不想去的，所有负向的需求必须提取到这个字段内，比如“不辣的”应该提取出“辣的”，“不要人多的”应该提取出“人多”，“讨厌嘈杂的”应该提取出“嘈杂”。
    - **mustsee**：表示该需求是否代表一个具体的地点名称。如果是，此字段为`true`，否则写`false`。
    - **type**：指示该需求是针对“地点”还是“行程”，地点有“地点”，“起点”，“终点”这三种类型。总的来说，该字段可选值有“地点”，“起点”，“终点”或“行程”。

    - 你的返回应该是以下格式的列表：
    [
        {{
            "pos": "正向需求",（排除掉负向需求后，剩下的需求）
            "neg": "负向需求"（不想要的，讨厌的，拒绝的，不想去，不想看的，任何被否定的需求）,
            "mustsee": true (是否是必经点，所有具体的地点都应该设为true),
            "type": "地点" 
        }}, 
        ...
    ]
    - 其中，**正向需求**不能为空，且正向需求中不可以有否定的需求，所有否定的需求应该被总结到"neg"字段的value中。
    - 在对应地点没有**负向需求**的时候，将其设为 null。
    - 用户有时只会描述不想要什么（负向需求），针对没有**正向需求**的情况，应该基于**负向需求**总结一个**正向需求**。比如用户可能说‘不想吃辣的’，这时候输出应该包括："pos"对应"吃的"，"neg"对应"辣的"。
    - 独立的需求必须是要有特定形容或者要求的才算是需求，比如"推荐一条路线"不算是一个独立的需求。
    - "mustsee"必经点应该是一个具体的地点名称，不可以是一个统称。
    - 如果一个地点确定是“起点”或者“终点”，则“type”字段的值是“起点”或者“终点”，“起点”和“终点”是必经点，"mustsee"字段设为true。
    - 一个地点，只有是具体的某个景点或者地点的时候，才能作为“起点”或者“终点”，只可以返回最多一个“起点”和一个“终点”。
    - 返回不包括任何其他内容。

    ### 输出举例：

    例子1：
    输入："我想先去思南公馆转一转，然后在附近帮我找点好玩的安排个线路，不要人多的"
    输出：
    [
        {{
            "pos": "思南公馆",
            "neg": null,
            "mustsee": true,
            "type": "起点"
        }}, 
        {{
            "pos": "思南公馆周围好玩的地方", //如果"pos"字段有“附近”，“周围”等表示位置的词语，必须要确定具体在什么地点附近，比如“思南公馆附近的好玩的地方”。
            "neg": "人多",
            "mustsee": false,
            "type": "地点"
        }}
    ]

    例子2：
    输入："去甜爱路走走，附近找一家不辣的本帮菜，晚上去外滩看看夜景"
    输出：
    [
        {{
            "pos": "甜爱路",
            "neg": null,
            "mustsee": true,
            "type": "起点"
        }},
        {{
            "pos": "甜爱路附近的本帮菜餐馆",
            "neg": "辣的",
            "mustsee": false,
            "type": "地点"
        }},
        {{
            "pos": "外滩",
            "neg": null,
            "mustsee": true,
            "type": "终点"
        }}
    ]

    例子3：
    输入："海淀区走走"
    输出：
    [
        {{
            "pos": "海淀区走走",
            "neg": null,
            "mustsee": true,
            "type": "地点"
        }}
    ]

    ---

    ### mustsee字段赋值举例
    "mustsee"为true的地点名称：“华联商场”，“老麦咖啡店”，“武康大楼”，“南锣鼓巷”，...
    "mustsee"false的地点名称：“商场”，“奶茶店”，“酒吧”，“咖啡”，...
    
    ---

    ### 输出规范
    - 返回一个列表，该列表的每一项都是一个字典，其中包含"pos"、"neg"、"mustsee"和"type"四个键值对。
    - 以一个 JSON List 返回。
    - list 可为空，为空请只返回一个 JSON list。
    - 输出中不应包含任何其他信息，确保你的返回可以被 json.loads 解析。

    ### 用户输入
    {user_input}

    ---

    ### 任务概述
    您的任务是分析并拆解给出的**用户输入**中的需求描述，拆解成独立的需求并返回。
    1. 首先要拆分出不同的独立的需求，要对每个独立的需求分解成正向需求和负向需求。
    2. 正向需求应该只包含用户想要的，负向需求中应该只包含用户不想要的。
    3. 对于每个独立的需求，参考**mustsee字段赋值举例**对"mustsee"字段进行赋值，分析**正向需求**是否是一个具体的地点名称，如果是将"mustsee"设置为true，否则设为false。
    4. 参考**举例**和**输出格式**补齐其他字段。

    #### 注意事项：
    - 不要包含重复的独立的需求，要保证每个独立的需求是对应用户需求中不同的关键点。
    - "行程"需求应该是针对整个行程的需求,比如包含几个地点,大致时间等等,其余的均为地点需求。
    - "行程"或"地点"的需求不是必须都包括，具体根据用户需求判断。
    - 请确保所有负向需求被提取到"neg"字段对应的内容中。
    - "pos"字段的内容**不能包含否定的表达**（比如"不"，"不想"，"不要"等等），因为所有否定表达应该已经被提取到了"neg"字段内。
    - type字段只可以是["地点", "行程", "起点", "终点"]之一。

    请确保关键词准确地包含了需求的所有要点，并保持描述简洁明了。

    所有景点必须是完全拆分的，比如“南锣鼓巷和鼓楼”必须拆分成“南锣鼓巷” 和 “鼓楼”这两个需求

    ---

    现在，请根据**用户输入**，参考**输出举例**，按照**输出规范**和**输出格式**返回。
    """

    return prompt


def get_dayplan_prompt(context_string, must_see_string, keyword_reqs, userReqList, maxPoiNum, numMustSee, numCandidates, itinerary_reqs, start_end, comments="", hours=None, mark_citywalk=False):
    
    if "好玩" in keyword_reqs:
        keyword_reqs.remove("好玩")

    if numMustSee > maxPoiNum-2:
        maxPoiNum = numMustSee+2

    if len(comments) > 0:
        comments = f"- Include comments in '总体理由' in your response: {comments}"

    if hours is None:
        hours = 8

    if mark_citywalk == True:
        times = 2
    else:
        times = 1

    itinerary_pos_reqs, itinerary_neg_reqs = itinerary_reqs
    itinerary_reqs = f""
    if len (itinerary_pos_reqs) > 0:
        itinerary_reqs += f"- **对整个行程的要求**: {itinerary_pos_reqs}，"
    
    if len (itinerary_neg_reqs) > 0:
        itinerary_reqs += f"行程**不要{itinerary_neg_reqs}**"
        
    start_poi, end_poi = start_end
    if start_poi is not None:
        start_poi = f'- **起点**：{start_poi}'
    else:
        start_poi = f""
    if end_poi is not None:
        end_poi = f'- **终点**：{end_poi}'
    else:
        end_poi = f""

    prompt = f"""
    您好ChatGPT，我邀请您成为一位极富创意和专业知识的旅游指南，专门为一天的行程设计出完美的旅游计划。
    请深思熟虑，根据所提供的“候选景点”列表，以一种吸引人而真实的旅行故事的形式，设计一份一日游行程。

    ---

    ## 行程设计规则

    接下来，请按照我提供的指引，为游客设计出一个难忘的一日游行程。

    为游客设计一日游行程:
    - **候选景点顺序**: {context_string}
    - **必须包括的景点**: {keyword_reqs}
    - **关键词需求**: {keyword_reqs}
    - **用户原始需求**：{userReqList}
    {comments}
    {itinerary_reqs}
    {start_poi}
    {end_poi}

    ## 行程限制

    - **行程时间**: 少于 {hours} 小时
    - **景点选择**: 必须按照给定的序列号顺序

    ---
        
    ## 输出格式：
    {{
        "itinerary": "景点列表，以'->'分隔"
        "总体理由": "对设计的一日游行程的整体推荐理由",
        "pois": {{
            "n": "景点描述及推荐理由", ...
        }}
    }}
    注意：

    - "n"是 sequence number，它应该是一个整数。序列号在输出中必须是按照升序排列，并且要与候选列表中选定景点的序号相匹配。
    - "itinerary" 列举了所有会去的景点的名称，用'->'分隔，比如 "poi1->poi2->..."，注意只包含名称，不包含sequence number，且顺序与"pois"中的景点顺序完全一致。
    
    ---

    ## 语言风格转换：

    1. 你首先需要参考**语言风格示例**，按如下方式改写“候选景点”中的对景点的描述：
    - 写作风格：用**散文**的形式，对原有的特点或活动进行细化和扩展，加入丰富的观感和氛围描述。利用自然和情感的词句，让描述更加生动和引人入胜。
    - 生动的画面：充分使用具体而生动的形容词和短语，为读者提供一个栩栩如生的视觉体验。
    - 对比与比较：采用对比技巧，如将古老与现代、繁忙的景象与宁静的环境进行对比，以凸显景点的独特性。
    - 具体地点与情感联系：明确提到具体的地点或环境，并与历史或情感背景结合起来，增强描述的真实性和深度。
    - 对不同地点的描述要变换句式，风格，确保表达的多样性。

    ### 语言风格示例：
    -  原描述：静安寺,静安区,魔都市中心，金碧辉煌、气势恢宏的寺庙
       转换后：在繁华的静安区有这样一个古老的静安寺，给人的感觉很不一样。那里金碧辉煌、气势恢宏，给人一种宁静与尊严的感觉，有种特别的魅力。
    -  原描述：蒙特利尔园,浦东新区,公园超美的拍照地，秋天梧桐大道一片金灿灿，夏天荷花池荷花盛放"
       转换后：浦东新区的蒙特利尔园是个很适合拍照的地方。当秋风吹过，那梧桐大道仿佛铺上了一层金色的毯子；而夏日里，荷花池中的荷花竞相绽放，美得让人驻足。
    -  原描述：苏州河畔,黄浦区,
       转换后：苏州河畔位于黄浦区，河水悠悠，低语着这座都市的旧日往事，吸引过往的人们驻足。

    2. 根据风格转换好的景点描述，变化表达和句式风格，确保表达的多样性。

    ---

    -- 行动前的思考 --
    1. Take a deep breath and work on problems step-by-step.
    2. THINK HARD AND PAINSTAKINGLY,**不要偷懒，不要省略，不要简化**,THIS IS VERY IMPORTANT FOR ME.
    3. 注意确保游客的代入感，让他们觉得这个行程是为他们量身定制的。
    4. **只选择**那些来自**候选景点**列表，并且按照**候选景点顺序**升序排列的景点。
    5. 除非**关键词需求**中特别提到了喝酒相关的需求，否则不要将酒吧添加到行程中。
    6. 咖啡厅和酒吧的数量不能超过两个，而且要符合景点的**候选景点顺序**。**酒吧应放在行程末尾，咖啡则不应该是行程的最后一站**。
    7. 酒吧放在行程末尾如果破坏了行程中景点的升序顺序，则**不添加该酒吧**。
    8. 除非**用户原始需求**要求去游乐场，否则路线中**不要**包含任何游乐场（迪士尼等）。
    9. 整个行程，**最多只能包括1个吃饭的地方**。
    10. 请确保用户的**关键词需求**是被严格满足的，比如用户如果提到了想去3个点，那么你规划的行程中应该完全按照用户的需求，只包含3个景点。
    
    ---
    
    你需要考虑每个景点的营业时间和参观时长，确保所选的所有景点都能在这一天内真正到达和参观。

    ## 行程生成步骤
    1. 根据**候选景点**列表，按照升序选择合适的景点加入行程，确保你的路线是经过筛选的，选择大概6~10个POI，不可以加入全部**候选景点**中的景点。
    2. 所有加入行程的景点必须符合**候选景点顺序**的升序排列。
    3. 如果咖啡厅或酒吧的加入会打乱景点的升序排列，应当将其**排除出行程**。
    4. 确保所有**关键词需求：{keyword_reqs}**中的每一个需求都能至少被**候选景点顺序**中的一个景点满足。
    5. **用户原始需求：{userReqList}**也需要被认真考虑，尽量被**候选景点顺序**中的一个景点满足。
    6. 最终生成一个包含所有选定景点的JSON文件。
    7. "总体理由"应该是概括性的，主要描述行程的主题和特点，参考**语言风格转换**，不要超过50字。
    8. 每个景点单独进行描述，不要连贯成行程描述，每个景点都应该是独立的细节的的介绍，参考**语言风格转换**，要多变换风格，确保表达的多样性。

    ---
    
    现在请按照**行程生成步骤**和**行程限制**为游客规划一个选包含6~10个POI的行程，然后按照规定好的**输出格式**，根据**语言风格转换**将原有景点描述转换，以描述行程。
    注意：
    - 第一个景点的推荐理由应该是“我们的行程从...开始”，类似这样的表达，每个景点必须和相邻的景点保持连贯的表达，比如“离开XX，我们继续前往XXX”，或者“沿着XX路走，我们可以去到XXX”，对景点的推荐理由应该和对行程的描述是融合的。
    - **总体理由**和每个景点的**景点推荐理由**大概30字左右，最多不要超过40字**，推荐理由应该简洁而吸引人，且是客观的描述，删除掉所有第一人称主观描述。
    - 景点必须是**经过选择的**，景点数量应在6至10个之间，**景点名称必须是**候选景点**中的景点名称**。
    - **务必确保所选的景点都来自**候选景点顺序**，且都是按照**候选景点顺序**升序排列的**，且**不要**选择全部候选景点。
    """
    
    return prompt